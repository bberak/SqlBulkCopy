using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Text;
using Dapper;

namespace SqlBulkCopyExample
{
    public interface IInserter<T, TAutoValue>
    {
        string TableName { get; }

        TAutoValue ConvertToAutoValue(IDictionary<string, object> dbKeys);

        T AfterAutoValueRetrieved(T src, TAutoValue autoValue);

        IEnumerable<T> Insert(IEnumerable<T> items, IDbConnection conn, IDbTransaction externalTransaction = null);
    }

    public abstract class BaseInserter<T, TAutoValue> : IInserter<T, TAutoValue>
    {
        public string TableName { get; private set; }

        private readonly List<ColumnMapping> Mappings;

        public BaseInserter(string tableName)
        {
            TableName = tableName;
            Mappings = new List<ColumnMapping> { };
        }

        public abstract TAutoValue ConvertToAutoValue(IDictionary<string, object> dbAutoValues);

        public abstract T AfterAutoValueRetrieved(T src, TAutoValue autoValue);
        
        public IEnumerable<T> Insert(IEnumerable<T> items, IDbConnection conn, IDbTransaction externalTransaction = null)
        {
            if (items == null || items.Any() == false)
                return items;

            if (externalTransaction != null && externalTransaction.Connection != conn)
                throw new InvalidOperationException("The transaction was started by a different connection");

            var columns = Mappings.Where(x => !x.IsAutoGenerated);
            var autoColumns = Mappings.Where(x => x.IsAutoGenerated);

            if (autoColumns.Any())
                return ExecuteInsert(items, columns, autoColumns, conn, externalTransaction);
            else
                ExecuteInsert(items, columns, conn, externalTransaction);

            return items;
        }

        protected virtual int ExecuteInsert(IEnumerable<T> items, IEnumerable<ColumnMapping> columns, IDbConnection conn, IDbTransaction externalTransaction = null)
        {
            var insert = String.Format("{0} {1} {2};", BeginInsertStatement(), ListColumns(Mappings), ListValues(Mappings));
            var result = 0;

            using (var transaction = externalTransaction ?? conn.BeginTransaction())
            {
                result = conn.Execute(insert, items, transaction);

                transaction.Commit();
            }

            return result;
        }

        protected virtual IEnumerable<T> ExecuteInsert(
            IEnumerable<T> items, 
            IEnumerable<ColumnMapping> columns,
            IEnumerable<ColumnMapping> autoColumns,
            IDbConnection conn, 
            IDbTransaction externalTransaction = null)
        {
            var rng = new Random(Environment.TickCount);
            var tempTable = String.Format("{0}_{1}", TableName, rng.Next(0, 10000000));
            var insertStatement = String.Format("{0} {1} {2} {3};", 
                BeginInsertStatement(),
                ListColumns(columns),
                InsertIntoTempTable(tempTable, autoColumns),
                ListValues(columns));

            IDictionary<string, object>[] results = null;

            using (var transaction = externalTransaction ?? conn.BeginTransaction())
            {
                conn.Execute(CreateTempTable(tempTable, autoColumns), null, transaction);

                conn.Execute(insertStatement, items, transaction);

                results = conn.Query(SelectTempTable(tempTable), null, transaction).Select(d => d as IDictionary<string, object>).ToArray();

                if (results == null || results.Any() == false)
                    throw new DataException("Failed to retrieve any results from the INSERT");

                if (results.Count() != items.Count())
                    throw new DataException("Received the incorrect number of results from the INSERT");
                
                items = items.Select((x, idx)
                    => AfterAutoValueRetrieved(x, ConvertToAutoValue(results[idx])))
                    .ToList();

                conn.Execute(DropTempTable(tempTable), null, transaction);

                transaction.Commit();
            }

            if (results != null && results.Any())
            {
                return items.Select((x, idx)
                    => AfterAutoValueRetrieved(x, ConvertToAutoValue(results[idx])))
                    .ToList();
            }

            return items;
        }

        protected virtual string CreateTempTable(string name, IEnumerable<ColumnMapping> autoColumns)
        {
            var r= String.Format(@"
                IF OBJECT_ID('tempdb..#{0}') IS NOT NULL 
                    BEGIN 
                        DROP TABLE #{0} 
                    END;               
                CREATE TABLE #{0} ({1})", 
                name,
                String.Join(", ", autoColumns.Select(x => x.Destination + " " + x.DbType).ToArray()));

            return r;
        }

        protected virtual string BeginInsertStatement()
        {
            return String.Format("INSERT INTO {0}", TableName);
        }

        protected virtual string ListColumns(IEnumerable<ColumnMapping> columns)
        {
            return String.Format("({0})", String.Join(", ", columns.Select(x => x.Destination).ToArray()));
        }

        protected virtual string InsertIntoTempTable(string name, IEnumerable<ColumnMapping> autoColumns)
        {
            return String.Format("OUTPUT {0} INTO #{1} ({2})",
                String.Join(", ", autoColumns.Select(x => String.Format("INSERTED.{0}", x.Destination)).ToArray()),
                name,
                String.Join(", ", autoColumns.Select(x => x.Destination).ToArray()));
        }

        protected virtual string ListValues(IEnumerable<ColumnMapping> columns)
        {
            return String.Format("VALUES ({0})", String.Join(", ", columns.Select(x => "@" + x.Destination).ToArray()));
        }

        protected virtual string SelectTempTable(string name)
        {
            return String.Format("SELECT * FROM #{0}", name);
        }

        protected virtual string DropTempTable(string name)
        {
            return String.Format("DROP TABLE #{0};", name);
        }

        protected ColumnMapping Column(string source, string destination, bool isAutoGenerated = false, string dbType = null)
        {
            var item = new ColumnMapping(source, destination, isAutoGenerated, dbType);

            Mappings.Add(item);

            return item;
        }
        
        protected ColumnMapping Column<TProperty>(Expression<Func<T, TProperty>> propertyLambda, string destination, bool isAutoGenerated = false, string dbType = null)
        {
            var propertyInfo = GetPropertyInfo(propertyLambda);

            return Column(propertyInfo.Name, destination, isAutoGenerated, dbType);
        }

        protected ColumnMapping AutoColumn<TProperty>(Expression<Func<T, TProperty>> propertyLambda, string destination, string dbType)
        {
            return Column(propertyLambda, destination, isAutoGenerated: true, dbType: dbType);
        }

        protected ColumnMapping Column<TProperty>(Expression<Func<T, TProperty>> propertyLambda, bool isAutoGenerated = false, string dbType = null)
        {
            var propertyInfo = GetPropertyInfo(propertyLambda);

            return Column(propertyInfo.Name, propertyInfo.Name, isAutoGenerated, dbType);
        }

        protected ColumnMapping Auto<TProperty>(Expression<Func<T, TProperty>> propertyLambda, string dbType)
        {
            return Column(propertyLambda, isAutoGenerated: true, dbType: dbType);
        }

        private static PropertyInfo GetPropertyInfo<TProperty>(Expression<Func<T, TProperty>> propertyLambda)
        {
            var type = typeof(T);

            var member = propertyLambda.Body as MemberExpression;
            if (member == null)
                throw new ArgumentException(string.Format(
                    "Expression '{0}' refers to a method, not a property.",
                    propertyLambda.ToString()));

            var propInfo = member.Member as PropertyInfo;
            if (propInfo == null)
                throw new ArgumentException(string.Format(
                    "Expression '{0}' refers to a field, not a property.",
                    propertyLambda.ToString()));

            if (type != propInfo.ReflectedType &&
                !type.IsSubclassOf(propInfo.ReflectedType))
                throw new ArgumentException(string.Format(
                    "Expresion '{0}' refers to a property that is not from type {1}.",
                    propertyLambda.ToString(),
                    type));

            return propInfo;
        }
    }

    public class ColumnMapping
    {
        public string Source { get; private set; }

        public string Destination { get; private set; }

        public bool IsAutoGenerated { get; private set; }

        public string DbType { get; private set; }

        public ColumnMapping(string source, string destination, bool isAutoGenerated = false, string dbType = null)
        {
            Source = source;
            Destination = destination;
            IsAutoGenerated = isAutoGenerated;
            DbType = dbType;
        }
    }
}
